<Row>
    <AntDesign.Col Span="24">
        <div class="IconList-GroupBox">
            <RadioGroup @bind-Value="currentTheme" ButtonStyle="solid" Size="large" TValue="string" OnChange="OnThemeChanged">
                <Radio RadioButton Value="@("outline")">
                    <Icon Component="OutlineSvg" Style="font-size:16px" />Outlined
                </Radio>
                <Radio RadioButton Value="@("fill")">
                    <Icon Component="FilledSvg" Style="font-size:16px" />Filled
                </Radio>
                <Radio RadioButton Value="@("twotone")">
                    <Icon Component="TwoToneSvg" Style="font-size:16px" />TwoTone
                </Radio>
            </RadioGroup>
            <Search Class="IconList-Search" Size="@InputSize.Large"
                    Placeholder="@LanguageService.Resources["app.components.icon.search"]"
                    OnInput="@(args => OnSearching(args.Value?.ToString()))" />
        </div>
    </AntDesign.Col>
    <AntDesign.Col Span="24">
        @if (displayIcons == null)
        {
            <Skeleton Loading="true" ParagraphRows="10"></Skeleton>
        }
        else
        {
            foreach (var item in displayIcons)
            {              
                <Row>
                    <Title Level="4">@LanguageService.Resources["app.components.icon." + @item.Category]</Title>
                </Row>
                <Row>
                    @foreach (var name in item.IconNames)
                    {                     
                        <AntDesign.Col Span="4">
                            <div class="IconList-Item" @onclick="(()=>OnCopyClick(currentTheme, name))">
                                <div><Icon Type="@name" Theme="@currentTheme" Style="font-size:36px"></Icon></div>
                                <div class="anticon-class"><Badge>@name</Badge></div>
                            </div>
                        </AntDesign.Col>
                    }
                </Row>
            }
        }
    </AntDesign.Col>
</Row>

@inject AntDesign.Docs.Services.IconListService iconListService
@inject IconService IconService
@inject ILanguageService LanguageService
@inject MessageService messageService
@inject IJSRuntime JsRuntime
@using System.Diagnostics

@code{

    private string currentTheme = "outline";
    RenderFragment OutlineSvg =@<svg width="1em" height="1em" fill="currentColor" aria-hidden="true" focusable="false" class="" viewBox="0 0 1024 1024"><path d="M864 64H160C107 64 64 107 64 160v704c0 53 43 96 96 96h704c53 0 96-43 96-96V160c0-53-43-96-96-96z m-12 800H172c-6.6 0-12-5.4-12-12V172c0-6.6 5.4-12 12-12h680c6.6 0 12 5.4 12 12v680c0 6.6-5.4 12-12 12z"></path></svg>;
RenderFragment FilledSvg =@<svg width="1em" height="1em" fill="currentColor" aria-hidden="true" focusable="false" class="" viewBox="0 0 1024 1024"><path d="M864 64H160C107 64 64 107 64 160v704c0 53 43 96 96 96h704c53 0 96-43 96-96V160c0-53-43-96-96-96z"></path></svg>;
RenderFragment TwoToneSvg =@<svg width="1em" height="1em" fill="currentColor" aria-hidden="true" focusable="false" class="" viewBox="0 0 1024 1024"><path d="M16 512c0 273.932 222.066 496 496 496s496-222.068 496-496S785.932 16 512 16 16 238.066 16 512z m496 368V144c203.41 0 368 164.622 368 368 0 203.41-164.622 368-368 368z"></path></svg>;

    private List<AntDesign.Docs.Services.IconItem> lstIcons { get; set; }
    private List<AntDesign.Docs.Services.IconItem> displayIcons { get; set; }

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();

        LanguageService.LanguageChanged += async (_, args) =>
        {
            await InvokeAsync(StateHasChanged);
        };

        lstIcons = await iconListService.GetIconsAsync();
        await  OnThemeChanged(currentTheme);
    }

    private async Task OnSearching(string word)
    {
        lstIcons = await iconListService.FindAll(word);
        await OnThemeChanged(currentTheme);

    }

    private async Task OnThemeChanged(string newTheme)
    {
        displayIcons = null;
        displayIcons = new List<Services.IconItem>();
        Stopwatch sw = new Stopwatch();
        sw.Start();   

        foreach (var categorys in lstIcons)
        {
            var itemIcons = new AntDesign.Docs.Services.IconItem();
            itemIcons.Category = categorys.Category;
            itemIcons.IconNames = new List<string>();
            foreach (var item in categorys.IconNames)
            {
                if (!IsNotExistedIcon(currentTheme, item))
                {
                    itemIcons.IconNames.Add(item);
                }
            }

            if (itemIcons.IconNames.Count > 0)
            {
                displayIcons.Add(itemIcons);
            }
        }


        Console.WriteLine(sw.ElapsedMilliseconds);
        return;
    }

    protected override bool ShouldRender()
    {
        return lstIcons.Any();
    }

    private bool IsNotExistedIcon(string theme, string type)
    {
        var svg = Task.Run(async () => await IconService.GetIconImg(type.ToLower(), theme.ToLower()));
        var res = string.IsNullOrEmpty(svg.Result?.ToString());
        return res;
    }

    private void OnCopyClick(string theme, string iconName)
    {
        string htmlIcon = $"<Icon Type=\"{iconName}\" Theme=\"{theme}\"/>";
        JsRuntime.InvokeAsync<object>(JSInteropConstants.copy, htmlIcon);
        messageService.Success(htmlIcon);
    }
}
