@inject  ILanguageService serviceLanguage     
@inject AntDesign.Docs.Services.DemoService demoService


    <section class="markdown">
        <Divider />
        <input  placeholder="Search in Components" style="border:none;" @onchange="((e)=>OnSearchEnter(e))" />          
        <Divider />

        @foreach (var covers in CoverItems)
        {
            <div>
                <AntDesign.Title Level="2">@serviceLanguage.Resources[covers.Type]<Tag>@covers.SubItems.Count</Tag></AntDesign.Title>
            </div>

            <Row>
                @foreach (var item in covers.SubItems)
                {
                    string url = $"{CurrentLanguage}/components/{item.Title.ToLower()}";
                    string title = serviceLanguage.Resources[item.Title];
                    <AntDesign.Col Xl="6" Lg="8" Sm="12" Xs="24" Style="padding:12px">
                        <a href=@url>
                            <Card Bordered Title=@(title) Hoverable>
                                <Body>
                                    <div style="text-align: center; vertical-align: middle; justify-content: center; height: 152px">
                                        <img src="@item.ImgSrc" style="height:120px; _margin-top: expression(( 196 - this.height ) / 2);padding:20px" alt="@title">
                                    </div>
                                </Body>
                            </Card>
                        </a>
                    </AntDesign.Col>
                }
            </Row>
        }


    </section>


@code{

    private string CurrentLanguage { get; set; }

    public class CoverItem
    {
        public string Type { get; set; }
        public List<Item> SubItems = new List<Item>();
    }

    public class Item
    {
        public string Title { get; set; }
        public string ImgSrc { get; set; }
    }

    private List<CoverItem> CoverItems = new List<CoverItem>();

    protected override async Task OnInitializedAsync()
    {
        serviceLanguage.LanguageChanged += (sender, args) =>
        {
            CurrentLanguage = serviceLanguage.CurrentCulture.Name;

            InvokeAsync(StateHasChanged);
        };

        CoverItems = await InitCoverItem();

    }


    private async Task< List<CoverItem>>  InitCoverItem()
    {
        List<CoverItem> covers = new List<CoverItem>();

        var demoMenuItem = await demoService.GetMenuAsync();

        foreach (var menu in demoMenuItem)
        {
            if (menu.Url == "docs") continue;                      // docs
            for (int i = 1; i < menu.Children.Length; i++)     //components, except for overview component
            {

                var coverItem = new CoverItem();
                var groups = menu.Children[i];

                coverItem.Type = groups.Title;                      // first time, it will get the chinese title.

                foreach (var item in groups.Children)
                {
                    var demoComponent = await demoService.GetComponentAsync(item.Title);
                    var imgSrc = demoComponent.Cover;
                    var title = demoComponent.Title;
                    coverItem.SubItems.Add(new Item { Title = title, ImgSrc = imgSrc });
                }
                covers.Add(coverItem);
            }
        }
        return covers;
    }

    private async Task OnSearchEnter(ChangeEventArgs args)
    {
        string word = args.Value.ToString();

        // reset all data when word is empty or null
        if (string.IsNullOrEmpty(word))
        {
            CoverItems = await InitCoverItem();
            return;
        }

        // search components with english key words
        CoverItems.Clear();
        foreach (var item in await InitCoverItem())
        {
            var lst = item.SubItems.FindAll(x => x.Title.Contains(word, StringComparison.OrdinalIgnoreCase));

            if (lst.Count < 1) continue;  // count = 0       
            CoverItems.Add(new CoverItem
            {
                Type = item.Type,
                SubItems = lst
            });
          
        }
    }
}